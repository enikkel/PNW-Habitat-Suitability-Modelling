#### GBIF maltese star thistle filtering ####

# install necessary packages
install.packages("devtools")
install.packages("CoordinateCleaner")
install.packages("countrycode")
install.packages("rnaturalearthdata")

# load packages 
library(rgbif)
library(scrubr)
library(maps)
library(dplyr)
library(sp)
library(raster)
library(maptools)
library(rgdal)
library(dismo)
library(countrycode)
library(CoordinateCleaner)
library(ggplot2)
library(devtools)

##### download data from GBIF #####
# "simple" download
# import Text/CSV into excel workbook
# UTC-8, tab
# save as .xslx

myspecies <- c("Centaurea melitensis L.")
maltese_star <- occ_data(scientificName = myspecies, 
                                hasCoordinate = TRUE, 
                                hasGeospatialIssue = FALSE, 
                                limit = 45000) # limit based on no. of occurences

# to view
View(maltese_star)

# keep the columns that matter for mapping and cleaning the occurrence data:
C_melitensis <- maltese_star$data[ , c("species", "decimalLongitude", "decimalLatitude", 
                                       "issues", "countryCode", "individualCount", 
                                       "occurrenceStatus", "coordinateUncertaintyInMeters", 
                                       "institutionCode", "gbifID", "references", "basisOfRecord", 
                                       "year", "month", "day", "eventDate", "geodeticDatum", 
                                       "datasetName")]

##### Create/view map of raw data points #####
wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
  geom_point(data = C_melitensis, aes(x = decimalLongitude, y = decimalLatitude),
             colour = "darkred", size = 0.5)+
  theme_bw()

##### Clean records #####

# remove records without coordinates (should not have been included in download but just in case)
# remove rows with N/A 
C_melitensis <- C_melitensis%>%
  filter(!is.na(decimalLongitude))%>%
  filter(!is.na(decimalLatitude))%>%
  filter(!is.na(countryCode))%>%
  filter(!is.na(occurrenceStatus))%>%
  filter(!is.na(coordinateUncertaintyInMeters))%>%
  filter(!is.na(institutionCode))%>%
  filter(!is.na(geodeticDatum))%>%
  filter(occurrenceStatus != "ABSENT") # removes all 'absent' records

# remove records pre-1970 and 2021
C_melitensis <- C_melitensis%>%
  filter(between(year, 1970, 2020))

# can create a histogram of year, month, day of each record to find inconsistencies
hist(C_melitensis$year, breaks = 50)
hist(C_melitensis$month, breaks = 12)
hist(C_melitensis$day, breaks = 31) # substantially more records on the 1st or 31st of a given month

# can also check where the values fall using 'table' function
table(C_melitensis$year)

##### Clean using CoordinateCleaner #####

# convert country code from ISO2c to ISO3c (so coordinatecleaner can use it)
C_melitensis$countryCode <- countrycode(C_melitensis$countryCode, 
                                        origin =  'iso2c', 
                                        destination = 'iso3c')

# did not show warning message for unidentified country code

# examine flagged records
C_melitensis <- data.frame(C_melitensis)
flags <- clean_coordinates(x = C_melitensis,  
                           lon = "decimalLongitude", 
                           lat = "decimalLatitude",
                           countries = "countryCode",
                           species = "species",
                           tests = c("capitals", "centroids", "equal","gbif", "institutions",
                                     "zeros", "countries")) # most test are on by default

# identify and remove flag records at the same time 
# to avoid specifying it in each function:
names(C_melitensis)[2:3] <- c("decimallongitude", "decimallatitude")

C_melitensis_clean <- C_melitensis%>%
  cc_val()%>% # invalid lat/lon coordinates
  cc_equ()%>% # records with identical lat/lon
  cc_cap()%>% # coordinates in vicinity of country capitals
  cc_cen()%>% # coordinates in vicinity of country or probince centroids
  cc_coun(iso3 = "countryCode")%>% #coordinates outside reported country
  cc_gbif()%>% # coordinates assigned to GBIF headquarters
  cc_inst()%>% # coordinates in the vicinity of biodiversity institutions (botanical gardens, universities, museums)
  cc_sea()%>% # identifies non-terrestrial coordinates **
  cc_zero()%>% # coordinates that are zero 
  cc_dupl() # duplicate records

##### MAP to visualize cleaning so far #####

wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
  geom_point(data = C_melitensis_clean, aes(x = decimallongitude, y = decimallatitude),
             colour = "darkred", size = 0.5)+
  theme_bw()

##### Continue Cleaning #####

# coordinate uncertainty <1000m - to match spatial resolution of 1km or less
C_melitensis_clean <- coord_uncertain(C_melitensis_clean, coorduncertainityLimit = 1000)
nrow(C_melitensis_clean) # 5567 records left from original 20912

##### Split records into training and testing #####

C_melitensis_train <- C_melitensis_clean%>%
  filter(between(year, 1970, 2000)) # leaves 1142 records

C_melitensis_test <- C_melitensis_clean%>%
  filter(between(year, 2001, 2020)) # leaves 4425 records

# check on map
wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
  geom_point(data = C_melitensis_train, aes(x = decimallongitude, y = decimallatitude),
             colour = "yellow", size = 0.5)+
  theme_bw()

wm <- borders("world", colour="gray50", fill="gray50")
ggplot()+ coord_fixed()+ wm +
  geom_point(data = C_melitensis_test, aes(x = decimallongitude, y = decimallatitude),
             colour = "orange", size = 0.5)+
  theme_bw()
